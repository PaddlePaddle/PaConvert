# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import re
import sys
import os
import json
from typing import Sequence, Mapping, Tuple

def _check_json_file(path):
    lang_type=re.compile(r"\.json$")
    if lang_type.search(path) is not None:
        return True

    return False

def _get_pretty_format(
    contents: str,
    indent,
    ensure_ascii: bool = True,
    sort_keys: bool = True,
) -> str:
    def sort_dict(dictionary):
        return dict(sorted(dictionary.items()))

    json_data = json.loads(contents)

    if sort_keys and isinstance(json_data, dict):
        json_data = sort_dict(json_data)

    json_pretty = json.dumps(
        json_data,
        indent=indent,
        ensure_ascii=ensure_ascii
    )

    return f'{json_pretty}\n'


def _format_json_file(path):
    with open(path, 'r') as file:
        contents = file.read()

    new_contents = _get_pretty_format(contents, indent=2)

    # Remove the trailing newline character
    new_contents = new_contents.rstrip('\n') + '\n'

    with open(path, mode='w', encoding='UTF-8') as file:
        file.write(new_contents)


def main(argv=None):
    parser = argparse.ArgumentParser(
        description='Checker for copyright declaration.')
    parser.add_argument('filenames', nargs='*', help='Filenames to check')
    args = parser.parse_args(argv)

    retv = 0
    for path in args.filenames:
        is_json_file = _check_json_file(path)
        if is_json_file is None:
            print("warning:Unsupported file", path, file=sys.stderr)
            continue

        _format_json_file(path)


if __name__ == '__main__':
    exit(main())
