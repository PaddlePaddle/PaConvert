{
  "torch.Tensor.H": {
    "Matcher": "TensorHMatcher"
  },
  "torch.Tensor.T": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.Tensor.T"
  },
  "torch.Tensor.data": {
    "Matcher": "GenericMatcher",
    "paddle_api": "paddle.Tensor.data"
  },
  "torch.Tensor.device": {
    "Matcher": "GenericMatcher",
    "paddle_api": "paddle.Tensor.place"
  },
  "torch.Tensor.dtype": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.Tensor.dtype"
  },
  "torch.Tensor.grad": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.Tensor.grad"
  },
  "torch.Tensor.imag": {
    "Matcher": "Attribute2Func",
    "paddle_api": "paddle.Tensor.imag"
  },
  "torch.Tensor.is_cuda": {
    "Matcher": "TensorIsCudaMatcher"
  },
  "torch.Tensor.is_leaf": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.Tensor.is_leaf"
  },
  "torch.Tensor.is_meta": {},
  "torch.Tensor.is_quantized": {},
  "torch.Tensor.is_sparse": {
    "Matcher": "Attribute2Func",
    "paddle_api": "paddle.Tensor.is_sparse"
  },
  "torch.Tensor.is_sparse_csr": {
    "Matcher": "Attribute2Func",
    "paddle_api": "paddle.Tensor.is_sparse_csr"
  },
  "torch.Tensor.itemsize": {
    "Matcher": "Attribute2Func",
    "paddle_api": "paddle.Tensor.element_size"
  },
  "torch.Tensor.mH": {
    "Matcher": "TensorMhMatcher"
  },
  "torch.Tensor.mT": {
    "Matcher": "TensorMtMatcher"
  },
  "torch.Tensor.names": {},
  "torch.Tensor.nbytes": {
    "Matcher": "TensorNbytesMatcher"
  },
  "torch.Tensor.ndim": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.Tensor.ndim"
  },
  "torch.Tensor.real": {
    "Matcher": "Attribute2Func",
    "paddle_api": "paddle.Tensor.real"
  },
  "torch.Tensor.requires_grad": {
    "Matcher": "TensorRequiresGradMatcher",
    "paddle_api": "paddle.Tensor.stop_gradient"
  },
  "torch.Tensor.shape": {
    "Matcher": "TensorShapeMatcher"
  },
  "torch.__version__": {
    "Matcher": "GenericMatcher",
    "paddle_api": "paddle.__version__"
  },
  "torch.autograd.function.FunctionCtx.saved_tensors": {
    "Matcher": "Attribute2Func",
    "paddle_api": "paddle.autograd.PyLayerContext.saved_tensor"
  },
  "torch.autograd.profiler.profile.self_cpu_time_total": {},
  "torch.backends.cuda.matmul.allow_tf32": {
    "Matcher": "PaddleFlagMatcher",
    "enable_utils_code": true,
    "paddle_api": "PaddleFlag.matmul_allow_tf32"
  },
  "torch.backends.cudnn.allow_tf32": {
    "Matcher": "PaddleFlagMatcher",
    "enable_utils_code": true,
    "paddle_api": "PaddleFlag.cudnn_allow_tf32"
  },
  "torch.backends.cudnn.benchmark": {
    "Matcher": "PaddleFlagMatcher",
    "enable_utils_code": true,
    "paddle_api": "PaddleFlag.cudnn_benchmark"
  },
  "torch.backends.cudnn.deterministic": {
    "Matcher": "PaddleFlagMatcher",
    "enable_utils_code": true,
    "paddle_api": "PaddleFlag.cudnn_deterministic"
  },
  "torch.backends.cudnn.enabled": {
    "Matcher": "PaddleFlagMatcher",
    "enable_utils_code": true,
    "paddle_api": "PaddleFlag.cudnn_enabled"
  },
  "torch.bfloat16": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'bfloat16'"
  },
  "torch.bool": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'bool'"
  },
  "torch.cdouble": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'complex128'"
  },
  "torch.cfloat": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'complex64'"
  },
  "torch.complex128": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'complex128'"
  },
  "torch.complex64": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'complex64'"
  },
  "torch.distributed.ReduceOp.MAX": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.distributed.ReduceOp.MAX"
  },
  "torch.distributed.ReduceOp.MIN": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.distributed.ReduceOp.MIN"
  },
  "torch.distributed.ReduceOp.PRODUCT": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.distributed.ReduceOp.PROD"
  },
  "torch.distributed.ReduceOp.SUM": {
    "Matcher": "UnchangeMatcher",
    "paddle_api": "paddle.distributed.ReduceOp.SUM"
  },
  "torch.distributions.Distribution.batch_shape": {},
  "torch.distributions.Distribution.event_shape": {},
  "torch.distributions.Distribution.mean": {},
  "torch.distributions.Distribution.mode": {},
  "torch.distributions.Distribution.stddev": {},
  "torch.distributions.Distribution.variance": {},
  "torch.double": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'float64'"
  },
  "torch.dtype": {
    "Matcher": "GenericMatcher",
    "paddle_api": "paddle.dtype"
  },
  "torch.float": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'float32'"
  },
  "torch.float16": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'float16'"
  },
  "torch.float32": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'float32'"
  },
  "torch.float64": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'float64'"
  },
  "torch.half": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'float16'"
  },
  "torch.int": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'int32'"
  },
  "torch.int16": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'int16'"
  },
  "torch.int32": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'int32'"
  },
  "torch.int64": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'int64'"
  },
  "torch.int8": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'int8'"
  },
  "torch.long": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'int64'"
  },
  "torch.nn": {
    "Matcher": "GenericMatcher",
    "paddle_api": "paddle.nn"
  },
  "torch.pi": {
    "Matcher": "GenericMatcher",
    "paddle_api": "numpy.pi"
  },
  "torch.short": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'int16'"
  },
  "torch.uint8": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'uint8'"
  },
  "torch.utils.cpp_extension.BuildExtension.with_options": {
    "Matcher": "GenericMatcher",
    "paddle_api": "paddle.utils.cpp_extension.BuildExtension.with_options"
  },
  "torch.utils.cpp_extension.CUDA_HOME": {
    "Matcher": "GenericMatcher",
    "paddle_api": "paddle.utils.cpp_extension.cpp_extension.CUDA_HOME"
  },
  "torch.utils.data._utils.collate.default_collate_err_msg_format": {
    "Matcher": "GenericMatcher",
    "paddle_api": "'default_collate: batch must contain tensors, numpy arrays, numbers, dicts or lists; found {}'"
  },
  "torch.utils.data._utils.collate.np_str_obj_array_pattern": {
    "Matcher": "GenericMatcher",
    "paddle_api": "re.compile(r'[SaUO]')"
  }
}
