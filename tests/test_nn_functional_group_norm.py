# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.functional.group_norm")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[[-1.2392, -0.1310, -0.6679,  0.5476],
                            [ 1.1738, -1.7384, -0.7733,  0.3261],
                            [-0.0926, -1.0448, -1.2557, -1.5503],
                            [ 0.6402,  0.9072,  0.6780, -1.9885]],

                            [[ 0.0639, -1.1592,  1.4242, -0.4641],
                            [-0.1920,  0.1826,  1.9217, -0.4359],
                            [ 1.1926, -0.0247,  0.4744, -1.0216],
                            [-0.0360, -1.1656,  0.3661, -1.8147]]]])
        result = F.group_norm(x, 2)
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-4)


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[[-1.2392, -0.1310, -0.6679,  0.5476],
                            [ 1.1738, -1.7384, -0.7733,  0.3261],
                            [-0.0926, -1.0448, -1.2557, -1.5503],
                            [ 0.6402,  0.9072,  0.6780, -1.9885]],

                            [[ 0.0639, -1.1592,  1.4242, -0.4641],
                            [-0.1920,  0.1826,  1.9217, -0.4359],
                            [ 1.1926, -0.0247,  0.4744, -1.0216],
                            [-0.0360, -1.1656,  0.3661, -1.8147]]]])
        result = F.group_norm(x, 2)
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-4)


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[[-1.2392, -0.1310, -0.6679,  0.5476],
                            [ 1.1738, -1.7384, -0.7733,  0.3261],
                            [-0.0926, -1.0448, -1.2557, -1.5503],
                            [ 0.6402,  0.9072,  0.6780, -1.9885]],

                            [[ 0.0639, -1.1592,  1.4242, -0.4641],
                            [-0.1920,  0.1826,  1.9217, -0.4359],
                            [ 1.1926, -0.0247,  0.4744, -1.0216],
                            [-0.0360, -1.1656,  0.3661, -1.8147]]]])
        result = F.group_norm(x, 2, eps=1e-5)
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-4)


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[[-0.0878,  0.3378,  0.0547,  1.2068],
                    [0.4212, -1.6113,  0.7277,  0.0766],
                    [0.8189,  0.0958,  1.7780,  1.1192],
                    [0.7286, -0.1988,  1.0519,  0.9217]],

                    [[0.0088, -1.9815, -0.3543,  0.1712],
                    [-0.1830,  0.0325, -0.1784,  0.1072],
                    [1.1752, -0.0234, -1.0873, -0.5568],
                    [0.4471,  0.4073, -1.6031, -0.0310]]]])
        weight = torch.tensor([1.3, 1.2])
        bias = torch.tensor([0.1, 0.2])
        result = F.group_norm(x, 2, weight, bias, 1e-5)
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-4)


# generated by validate_unittest autofix, based on test_case_4
def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[[-0.0878,  0.3378,  0.0547,  1.2068],
                    [0.4212, -1.6113,  0.7277,  0.0766],
                    [0.8189,  0.0958,  1.7780,  1.1192],
                    [0.7286, -0.1988,  1.0519,  0.9217]],

                    [[0.0088, -1.9815, -0.3543,  0.1712],
                    [-0.1830,  0.0325, -0.1784,  0.1072],
                    [1.1752, -0.0234, -1.0873, -0.5568],
                    [0.4471,  0.4073, -1.6031, -0.0310]]]])
        weight = torch.tensor([1.3, 1.2])
        bias = torch.tensor([0.1, 0.2])
        result = F.group_norm(input=x, num_groups=2, weight=weight, bias=bias, eps=1e-5)
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-4)


# generated by validate_unittest autofix, based on test_case_4
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[[-0.0878,  0.3378,  0.0547,  1.2068],
                    [0.4212, -1.6113,  0.7277,  0.0766],
                    [0.8189,  0.0958,  1.7780,  1.1192],
                    [0.7286, -0.1988,  1.0519,  0.9217]],

                    [[0.0088, -1.9815, -0.3543,  0.1712],
                    [-0.1830,  0.0325, -0.1784,  0.1072],
                    [1.1752, -0.0234, -1.0873, -0.5568],
                    [0.4471,  0.4073, -1.6031, -0.0310]]]])
        weight = torch.tensor([1.3, 1.2])
        bias = torch.tensor([0.1, 0.2])
        result = F.group_norm(eps=1e-5, bias=bias, weight=weight, num_groups=2, input=x)
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-4)
