# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.ConstantPad3d")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[[[[-1.3328, -0.4948],
                            [ 0.8689,  1.1423]],
                            [[-0.2671, -1.0868],
                            [ 1.3011,  1.0469]]]]])
        model = nn.ConstantPad3d(1, 4.5)
        result = model(x)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[[[[-1.3328, -0.4948],
                            [ 0.8689,  1.1423]],
                            [[-0.2671, -1.0868],
                            [ 1.3011,  1.0469]]]]])
        model = nn.ConstantPad3d((1, 1, 1, 1, 1, 1), 4.6)
        result = model(x)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[[[[-1.3328, -0.4948],
                            [ 0.8689,  1.1423]],
                            [[-0.2671, -1.0868],
                            [ 1.3011,  1.0469]]]]])
        model = nn.ConstantPad3d(padding=1, value=0.8)
        result = model(x)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[[[[-1.3328, -0.4948],
                            [ 0.8689,  1.1423]],
                            [[-0.2671, -1.0868],
                            [ 1.3011,  1.0469]]]]])
        model = torch.nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0.6)
        result = model(x)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_3
def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[[[[-1.3328, -0.4948],
                            [ 0.8689,  1.1423]],
                            [[-0.2671, -1.0868],
                            [ 1.3011,  1.0469]]]]])
        model = nn.ConstantPad3d(value=0.8, padding=1)
        result = model(x)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_4
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[[[[-1.3328, -0.4948],
                            [ 0.8689,  1.1423]],
                            [[-0.2671, -1.0868],
                            [ 1.3011,  1.0469]]]]])
        model = torch.nn.ConstantPad3d(value=0.6, padding=(1, 1, 1, 1, 1, 1))
        result = model(x)
        """
    )
    obj.run(pytorch_code, ["result"])
