# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.linalg.eigh")


# Notice: In paddle, the cpu version and the gpu version symbols are different.
def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        A = torch.ones((2, 2), dtype=torch.complex128)
        A = A + A.T.conj()  # creates a Hermitian matrix
        result = torch.linalg.eigh(A)
        result = [result[0], torch.abs(result[1])]
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-7)


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        A = torch.ones((2, 2), dtype=torch.complex128)
        A = A + A.T.conj()  # creates a Hermitian matrix
        result = torch.linalg.eigh(input=A)
        result = [result[0], torch.abs(result[1])]
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-7)


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        A = torch.ones((2, 2), dtype=torch.complex128)
        A = A + A.T.conj()  # creates a Hermitian matrix
        result = torch.linalg.eigh(UPLO='L', input=A)
        result = [result[0], torch.abs(result[1])]
        """
    )
    obj.run(pytorch_code, ["result"], atol=1e-7)


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        A = torch.ones((2, 2), dtype=torch.complex128)
        A = A + A.T.conj()  # creates a Hermitian matrix
        result = torch.linalg.eigh(input=A, UPLO='L')
        out = [torch.tensor([], dtype=torch.float64),torch.tensor([], dtype=torch.complex128)]
        result = torch.linalg.eigh(input=A, UPLO='L', out=out)
        result = [result[0], torch.abs(result[1])]
        out = [out[0], torch.abs(out[1])]
        """
    )
    obj.run(pytorch_code, ["result", "out"], atol=1e-7)


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        A = torch.ones((2, 2), dtype=torch.complex128)
        A = A + A.T.conj()  # creates a Hermitian matrix
        out = [torch.tensor([], dtype=torch.float64),torch.tensor([], dtype=torch.complex128)]
        result = torch.linalg.eigh(A, 'L', out=out)
        result = [result[0], torch.abs(result[1])]
        out = [out[0], torch.abs(out[1])]
        """
    )
    obj.run(pytorch_code, ["result", "out"], atol=1e-7)


# generated by validate_unittest autofix, based on test_case_5
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        A = torch.ones((2, 2), dtype=torch.complex128)
        A = A + A.T.conj()  # creates a Hermitian matrix
        out = [torch.tensor([], dtype=torch.float64),torch.tensor([], dtype=torch.complex128)]
        result = torch.linalg.eigh(input=A, UPLO='L', out=out)
        result = [result[0], torch.abs(result[1])]
        out = [out[0], torch.abs(out[1])]
        """
    )
    obj.run(pytorch_code, ["result", "out"], atol=1e-7)
