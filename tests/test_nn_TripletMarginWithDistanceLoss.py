# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.TripletMarginWithDistanceLoss")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[1., 5, 3], [0, 3, 2], [1, 4, 1]])
        positive = torch.tensor([[5., 1, 2], [3, 2, 1], [3, -1, 1]])
        negative = torch.tensor([[2., 1, -3], [1, 1, -1], [4, -2, 1]])
        model = nn.TripletMarginWithDistanceLoss()
        result = model(x, positive, negative)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[1., 5, 3], [0, 3, 2], [1, 4, 1]])
        positive = torch.tensor([[5., 1, 2], [3, 2, 1], [3, -1, 1]])
        negative = torch.tensor([[2., 1, -3], [1, 1, -1], [4, -2, 1]])
        model = nn.TripletMarginWithDistanceLoss(margin=2)
        result = model(x, positive, negative)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[1., 5, 3], [0, 3, 2], [1, 4, 1]])
        positive = torch.tensor([[5., 1, 2], [3, 2, 1], [3, -1, 1]])
        negative = torch.tensor([[2., 1, -3], [1, 1, -1], [4, -2, 1]])
        model = nn.TripletMarginWithDistanceLoss(margin=2, swap=True)
        result = model(x, positive, negative)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[1., 5, 3], [0, 3, 2], [1, 4, 1]])
        positive = torch.tensor([[5., 1, 2], [3, 2, 1], [3, -1, 1]])
        negative = torch.tensor([[2., 1, -3], [1, 1, -1], [4, -2, 1]])
        model = nn.TripletMarginWithDistanceLoss(margin=2, reduction='mean')
        result = model(x, positive, negative)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[1., 5, 3], [0, 3, 2], [1, 4, 1]])
        positive = torch.tensor([[5., 1, 2], [3, 2, 1], [3, -1, 1]])
        negative = torch.tensor([[2., 1, -3], [1, 1, -1], [4, -2, 1]])
        model = nn.TripletMarginWithDistanceLoss(margin=2, reduction='sum')
        result = model(x, positive, negative)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[1., 5, 3], [0, 3, 2], [1, 4, 1]])
        positive = torch.tensor([[5., 1, 2], [3, 2, 1], [3, -1, 1]])
        negative = torch.tensor([[2., 1, -3], [1, 1, -1], [4, -2, 1]])
        model = nn.TripletMarginWithDistanceLoss(distance_function=None, margin=2, reduction='sum', swap=False)
        result = model(x, positive, negative)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_6
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        x = torch.tensor([[1., 5, 3], [0, 3, 2], [1, 4, 1]])
        positive = torch.tensor([[5., 1, 2], [3, 2, 1], [3, -1, 1]])
        negative = torch.tensor([[2., 1, -3], [1, 1, -1], [4, -2, 1]])
        model = nn.TripletMarginWithDistanceLoss(distance_function=None, margin=2, swap=False, reduction='sum')
        result = model(x, positive, negative)
        """
    )
    obj.run(pytorch_code, ["result"])
