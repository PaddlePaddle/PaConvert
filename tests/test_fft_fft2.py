# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.fft.fft2")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        result = torch.fft.fft2(t)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        result = torch.fft.fft2(t, s=(2,3))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        result = torch.fft.fft2(t, dim=(0,1))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        result = torch.fft.fft2(t, norm='ortho')
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        result = torch.fft.fft2(t, norm='backward')
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        result = torch.fft.fft2(t, norm='forward')
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        real = torch.randn(3, 2)
        imag = torch.randn(3, 2)
        out = torch.view_as_complex(torch.stack((real, imag), dim=-1))
        result = torch.fft.fft2(t, s=None, dim=(-2, -1), norm='forward', out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# generated by validate_unittest autofix, based on test_case_7
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        result = torch.fft.fft2(t, None, (-2, -1), 'forward')
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_7
def test_case_9():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        real = torch.randn(3, 2)
        imag = torch.randn(3, 2)
        out = torch.view_as_complex(torch.stack((real, imag), dim=-1))
        result = torch.fft.fft2(input=t, s=None, dim=(-2, -1), norm='forward', out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# generated by validate_unittest autofix, based on test_case_7
def test_case_10():
    pytorch_code = textwrap.dedent(
        """
        import torch
        t = torch.tensor([[3.+3.j, 2.+2.j, 3.+3.j], [2.+2.j, 2.+2.j, 3.+3.j]])
        real = torch.randn(3, 2)
        imag = torch.randn(3, 2)
        out = torch.view_as_complex(torch.stack((real, imag), dim=-1))
        result = torch.fft.fft2(out=out, norm='forward', dim=(-2, -1), s=None, input=t)
        """
    )
    obj.run(pytorch_code, ["result", "out"])
