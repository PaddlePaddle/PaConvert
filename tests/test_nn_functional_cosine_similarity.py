# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.functional.cosine_similarity")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(x, y)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(x, y, 1)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(x, y, dim=1)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(x1=x, x2=y, dim=1)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(x, y, dim=1, eps=1e-5)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(x, y, 1, 1e-5)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(x1=x, x2=y, dim=1, eps=1e-5)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[1., 2., 3.], [2., 3., 4.]])
        y = torch.tensor([[8., 3., 3.], [2., 3., 4.]])
        result = F.cosine_similarity(eps=1e-5, dim=1, x2=y, x1=x)
        """
    )
    obj.run(pytorch_code, ["result"])
