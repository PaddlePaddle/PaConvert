# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.LocalResponseNorm")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        lrn = nn.LocalResponseNorm(2)
        signal_2d = torch.randn(32, 5, 24, 24)
        result = lrn(signal_2d)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        lrn = nn.LocalResponseNorm(2)
        signal_4d = torch.randn(16, 5, 7, 7, 7)
        result = lrn(signal_4d)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        lrn = nn.LocalResponseNorm(2, alpha=0.0001, beta=0.75, k=1.0)
        signal_4d = torch.randn(16, 5, 7, 7, 7)
        result = lrn(signal_4d)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_3
def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        lrn = nn.LocalResponseNorm(2, 0.0001, 0.75, 1.0)
        signal_4d = torch.randn(16, 5, 7, 7, 7)
        result = lrn(signal_4d)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_3
def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        lrn = nn.LocalResponseNorm(size=2, alpha=0.0001, beta=0.75, k=1.0)
        signal_4d = torch.randn(16, 5, 7, 7, 7)
        result = lrn(signal_4d)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_3
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn as nn
        lrn = nn.LocalResponseNorm(k=1.0, beta=0.75, alpha=0.0001, size=2)
        signal_4d = torch.randn(16, 5, 7, 7, 7)
        result = lrn(signal_4d)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)
