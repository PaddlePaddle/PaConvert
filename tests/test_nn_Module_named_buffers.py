# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.Module.named_buffers")


def generate_torch_code(code_segment):
    TEMPLATE = f"""
    import torch
    import torch.nn as nn

    class SubModel(nn.Module):
        def __init__(self):
            super(SubModel, self).__init__()
            self.register_buffer('buf1', torch.tensor([1.,2.,4.,5.]))
            self.register_buffer('buf4', torch.tensor([1.,2.,4.,5.]))
            self.register_buffer('buf5', torch.tensor([1.,2.,4.,5.]))

        def forward(self, x):
            return x

    class Model(nn.Module):
        def __init__(self):
            super(Model, self).__init__()
            self.sub = SubModel()
            self.register_buffer('buf1', torch.tensor([1.,2.,4.,5.]))
            self.register_buffer('buf2', torch.tensor([1.,2.,4.,5.]))
            self.register_buffer('buf3', torch.tensor([1.,2.,4.,5.]))

        def forward(self, x):
            return x

    model = Model()
    result = []
    for name, buf in {code_segment}:
        result.append((name, buf))
    """

    return TEMPLATE


def test_case_1():
    pytorch_code = textwrap.dedent(generate_torch_code("model.named_buffers()"))
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        generate_torch_code("model.named_buffers(prefix='wfs')")
    )
    obj.run(pytorch_code, ["result"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        generate_torch_code("model.named_buffers(recurse=False)")
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        generate_torch_code("model.named_buffers(recurse=True)")
    )
    obj.run(pytorch_code, ["result"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        generate_torch_code(
            "model.named_buffers(prefix='wfs', recurse=True, remove_duplicate=False)"
        )
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_6():
    pytorch_code = textwrap.dedent(
        generate_torch_code("model.named_buffers('wfs', True, False)")
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_7():
    pytorch_code = textwrap.dedent(
        generate_torch_code(
            "model.named_buffers(remove_duplicate=False, recurse=True, prefix='wfs')"
        )
    )
    obj.run(pytorch_code, ["result"])
