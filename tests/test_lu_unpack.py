# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.lu_unpack")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        LU = torch.tensor([[5., 6.], [0.2, 0.8], [0.6, 0.5]])
        pivots = torch.tensor([3, 3], dtype=torch.int32)
        P, L, U = torch.lu_unpack(LU, pivots)
        """
    )
    obj.run(pytorch_code, ["P", "L", "U"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        LU = torch.tensor([[5., 6.], [0.2, 0.8], [0.6, 0.5]])
        pivots = torch.tensor([3, 3], dtype=torch.int32)
        P, L, U = torch.lu_unpack(LU, pivots, unpack_data=False)
        """
    )
    obj.run(pytorch_code, ["P", "L", "U"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        LU = torch.tensor([[5., 6.], [0.2, 0.8], [0.6, 0.5]])
        pivots = torch.tensor([3, 3], dtype=torch.int32)
        P, L, U = torch.lu_unpack(LU, pivots, unpack_pivots=False)
        """
    )
    obj.run(pytorch_code, ["P", "L", "U"])


# paddle not support out
def _test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        LU = torch.tensor([[5., 6.], [0.2, 0.8], [0.6, 0.5]])
        pivots = torch.tensor([3, 3], dtype=torch.int32)
        out = (torch.tensor([1.]), torch.randn(3, 2), torch.randn(2, 2))
        P, L, U = torch.lu_unpack(LU, pivots, unpack_pivots=False, unpack_data=True, out=out)
        """
    )
    obj.run(pytorch_code, ["P", "L", "U", "out"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        LU = torch.tensor([[5., 6.], [0.2, 0.8], [0.6, 0.5]])
        pivots = torch.tensor([3, 3], dtype=torch.int32)
        P, L, U = torch.lu_unpack(LU, pivots, unpack_pivots=False, unpack_data=True, out=None)
        """
    )
    obj.run(pytorch_code, ["P", "L", "U"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        LU = torch.tensor([[5., 6.], [0.2, 0.8], [0.6, 0.5]])
        pivots = torch.tensor([3, 3], dtype=torch.int32)
        P, L, U = torch.lu_unpack(LU, pivots, True, False)
        """
    )
    obj.run(pytorch_code, ["P", "L", "U"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        LU = torch.tensor([[5., 6.], [0.2, 0.8], [0.6, 0.5]])
        pivots = torch.tensor([3, 3], dtype=torch.int32)
        P, L, U = torch.lu_unpack(LU_data=LU, LU_pivots=pivots, unpack_data=True, unpack_pivots=False, out=None)
        """
    )
    obj.run(pytorch_code, ["P", "L", "U"])
