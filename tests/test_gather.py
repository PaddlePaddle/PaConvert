# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.gather")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2], [3, 4]])
        result = torch.gather(a, 1, torch.tensor([[0, 0], [1, 0]]))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.gather(torch.tensor([[1, 2], [3, 4]]), 1, torch.tensor([[0, 0], [1, 0]]))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        dim = 0
        index = torch.tensor([[0, 0], [1, 0]])
        result = torch.gather(torch.tensor([[1, 2], [3, 4]]), dim, index)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.gather(input=torch.tensor([[1, 2], [3, 4]]), dim=1, index=torch.tensor([[0, 0], [1, 0]]))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2], [3, 4]])
        out = a.clone().detach()
        result = torch.gather(a, 1, torch.tensor([[0, 0], [1, 0]]), out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2], [3, 4]])
        out = a.clone().detach()
        result = torch.gather(a, 1, torch.tensor([[0, 0], [1, 0]]), sparse_grad=False, out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# generated by validate_unittest autofix, based on test_case_6
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2], [3, 4]])
        out = a.clone().detach()
        result = torch.gather(input=a, dim=1, index=torch.tensor([[0, 0], [1, 0]]), sparse_grad=False, out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# generated by validate_unittest autofix, based on test_case_6
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2], [3, 4]])
        out = a.clone().detach()
        result = torch.gather(out=out, sparse_grad=False, index=torch.tensor([[0, 0], [1, 0]]), dim=1, input=a)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


def test_case_9():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        result = torch.gather(a, 1, torch.tensor([[0]]))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_10():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.gather(torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 1, torch.tensor([[0]]))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_11():
    pytorch_code = textwrap.dedent(
        """
        import torch
        dim = 0
        index = torch.tensor([[0]])
        result = torch.gather(torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), dim, index)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_12():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.gather(input=torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), dim=1, index=torch.tensor([[0]]))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_13():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        out = a.clone().detach()
        result = torch.gather(a, 1, torch.tensor([[0]]), out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


def test_case_14():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        out = a.clone().detach()
        result = torch.gather(a, 0, torch.tensor([[0]]), sparse_grad=False, out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# generated by validate_unittest autofix, based on test_case_14
def test_case_15():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        out = a.clone().detach()
        result = torch.gather(input=a, dim=1, index=torch.tensor([[0]]), sparse_grad=False, out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# generated by validate_unittest autofix, based on test_case_14
def test_case_16():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        out = a.clone().detach()
        result = torch.gather(out=out, sparse_grad=False, index=torch.tensor([[0]]), dim=0, input=a)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


def test_case_17_complex():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.arange(360, dtype=torch.float32).reshape([3, 4, 5, 6])
        a.requires_grad = True
        result = torch.gather(index=torch.ones([3, 2, 3, 3], dtype=torch.int32), input=a, dim=1)
        result.sum().backward()
        a_grad = a.grad
        a_grad.requires_grad = False
        """
    )
    obj.run(pytorch_code, ["result", "a_grad"])


def test_case_18_complex():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.arange(240, dtype=torch.float32).reshape([2, 2, 5, 3, 2, 2])
        a.requires_grad = True
        indices = torch.concat([torch.ones([2, 2, 2, 1, 2, 2], dtype=torch.int64), torch.zeros([2, 2, 2, 1, 2, 2], dtype=torch.int64)], dim = 3)
        result = torch.gather(a, index=indices, dim=2)
        result.backward(torch.ones_like(result))
        a_grad = a.grad
        a_grad.requires_grad = False
        """
    )
    obj.run(pytorch_code, ["result", "a_grad"])


def test_case_19():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([[1, 2], [3, 4]])
        out = a.clone().detach()
        result = torch.gather(a, 1, torch.tensor([[0, 0], [1, 0]]), out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])
