# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.init.trunc_normal_")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        conv = torch.nn.Conv2d(4, 6, (3, 3))
        torch.nn.init.trunc_normal_(conv.weight)
        result = conv.weight
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        conv = torch.nn.Conv2d(3, 6, (3, 3))
        torch.nn.init.trunc_normal_(tensor=conv.weight, mean=1., std=2., a=-1., b=1.)
        result = conv.weight
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_2
def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        conv = torch.nn.Conv2d(3, 6, (3, 3))
        torch.nn.init.trunc_normal_(conv.weight, 1., 2., -1., 1.)
        result = conv.weight
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_2
def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        conv = torch.nn.Conv2d(3, 6, (3, 3))
        torch.nn.init.trunc_normal_(b=1., a=-1., std=2., mean=1., tensor=conv.weight)
        result = conv.weight
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        conv = torch.nn.Conv2d(3, 6, (3, 3))
        torch.nn.init.trunc_normal_(tensor=conv.weight, mean=1., std=2., a=-5., b=5.)
        result = conv.weight
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        conv = torch.nn.Conv2d(3, 6, (3, 3))
        torch.nn.init.trunc_normal_(tensor=conv.weight, mean=0., std=3., a=-5., b=5.)
        result = conv.weight
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        conv = torch.nn.Conv2d(3, 6, (3, 3))
        torch.nn.init.trunc_normal_(tensor=conv.weight, mean=1., std=2., a=-1., b=1., generator=None)
        result = conv.weight
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_alias_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import timm
        conv = torch.nn.Conv2d(3, 6, (3, 3))
        timm.models.layers.trunc_normal_(tensor=conv.weight, mean=1., std=2., a=-1., b=1., generator=None)
        result = conv.weight
        """
    )
    paddle_code = textwrap.dedent(
        """
        import paddle

        conv = paddle.nn.Conv2D(in_channels=3, out_channels=6, kernel_size=(3, 3))
        init_TruncatedNormal = paddle.nn.initializer.TruncatedNormal(
            mean=1.0, std=2.0, a=-1.0, b=1.0
        )
        init_TruncatedNormal(conv.weight)
        result = conv.weight

        """
    )
    obj.run(pytorch_code, ["result"], expect_paddle_code=paddle_code)
