# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

import paddle
import pytest
from apibase import APIBase


class DeviceAPIBase(APIBase):
    def compare(
        self,
        name,
        pytorch_result,
        paddle_result,
        check_value=True,
        check_shape=True,
        check_dtype=True,
        check_stop_gradient=True,
        rtol=1.0e-6,
        atol=0.0,
    ):
        pytorch_result = str(pytorch_result).replace("cuda", "gpu")
        if "cpu:" in pytorch_result:
            pytorch_result = "cpu"
        assert pytorch_result == paddle_result


obj = DeviceAPIBase("torch.device")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device("{}".format("cpu"))
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = "cpu"
        result = torch.device(a)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device("cpu", 1)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device(type = "cpu", index = 1)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = "cpu"
        result = torch.device(a)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.device("cuda")
        result = torch.device(a)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device(type = "cuda", index = 1)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_9():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device(index=0, type="cpu")
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_8
@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_10():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device(index=0, type="cuda")
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_11():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device("cpu:1")
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_12():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device("cuda", 1)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_13():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = False
        result = torch.device("cuda" if cond else "cpu:1")
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_14():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = False
        result = torch.device("cuda" if cond else "cpu", 0 if cond else 1)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_15():
    pytorch_code = textwrap.dedent(
        """
        import torch
        type = "cuda"
        result = torch.device(type)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_16():
    pytorch_code = textwrap.dedent(
        """
        import torch
        type = 'cuda'
        index = 1
        result = torch.device(type, index)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_17():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = False
        type = "cuda:1" if cond else "cpu:1"
        result = torch.device(type)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_18():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = False
        type = "cuda" if cond else "cpu"
        index = 0 if cond else 1
        result = torch.device(type, index)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_19():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device(index=0, type="cuda")
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_20():
    pytorch_code = textwrap.dedent(
        """
        import torch
        type = 'cuda'
        index = 0
        result = torch.device(index=index, type=type)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_21():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = True
        result = torch.device(index=1 if cond else 0, type="cuda" if cond else "cpu")
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_22():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = True
        type = "cuda" if cond else "cpu"
        index = 1 if cond else 0
        result = torch.device(index=index, type=type)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_23():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = False
        result = torch.device("xpu" if cond else "cpu", 0 if cond else 1)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_24():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.device(1)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_25():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = True
        result = torch.device(1 if cond else 0)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_26():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = 1
        result = torch.device(a)
        """
    )
    obj.run(pytorch_code, ["result"])


@pytest.mark.skipif(
    condition=not paddle.device.is_compiled_with_cuda(),
    reason="can only run on paddle with CUDA",
)
def test_case_27():
    pytorch_code = textwrap.dedent(
        """
        import torch
        cond = True
        a = 1 if cond else 0
        result = torch.device(a)
        """
    )
    obj.run(pytorch_code, ["result"])
