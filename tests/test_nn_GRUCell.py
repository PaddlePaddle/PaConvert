# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap
import paddle
from apibase import APIBase


class GRUCellAPIBase(APIBase):
    def compare(
        self,
        name,
        pytorch_result,
        paddle_result,
        check_value=True,
        check_dtype=True,
        check_stop_gradient=True,
        rtol=1.0e-6,
        atol=0.0,
    ):
        assert pytorch_result.input_size == paddle_result.input_size
        assert pytorch_result.hidden_size == paddle_result.hidden_size
        assert pytorch_result.bias !=  paddle.all(paddle_result.bias_hh==0).item()
        assert pytorch_result.bias !=  paddle.all(paddle_result.bias_ih == 0).item()



obj = GRUCellAPIBase("torch.nn.GRUCell")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(2, 2, bias=False)
        """
    )
    obj.run(pytorch_code, ["rnn"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(2, 2, bias=False, device=torch.device('cpu'))
        """
    )
    obj.run(pytorch_code, ["rnn"])


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(2, 2, bias=False, device=torch.device('cpu'), dtype=torch.float32)
        """
    )
    obj.run(pytorch_code, ["rnn"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(2, 2, bias=False, dtype=torch.float32)
        """
    )
    obj.run(pytorch_code, ["rnn"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(2, 2, False, torch.device('cpu'))
        """
    )
    obj.run(pytorch_code, ["rnn"])


# generated by validate_unittest autofix, based on test_case_3
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(2, 2, False, torch.device('cpu'), torch.float32)
        """
    )
    obj.run(pytorch_code, ["rnn"])


# generated by validate_unittest autofix, based on test_case_3
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(input_size=2, hidden_size=2, bias=False, device=torch.device('cpu'), dtype=torch.float32)
        """
    )
    obj.run(pytorch_code, ["rnn"])


# generated by validate_unittest autofix, based on test_case_3
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(dtype=torch.float32, device=torch.device('cpu'), bias=False, hidden_size=2, input_size=2)
        """
    )
    obj.run(pytorch_code, ["rnn"])


# generated by validate_unittest autofix, based on test_case_3
def test_case_9():
    pytorch_code = textwrap.dedent(
        """
        import torch
        from torch import nn
        rnn = torch.nn.GRUCell(2, 2)
        """
    )
    obj.run(pytorch_code, ["rnn"])
