# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.matrix_power")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        x = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        result = torch.matrix_power(x, 2)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        x = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        result = torch.matrix_power(x, -2)
        """
    )
    obj.run(pytorch_code, ["result"], rtol=1.0e-5, atol=1.0e-8)


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.matrix_power(torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]]), 2)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        x = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        result = torch.matrix_power(input=x, n=-2)
        """
    )
    obj.run(pytorch_code, ["result"], rtol=1.0e-5, atol=1.0e-8)


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        x = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        out = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        result = torch.matrix_power(x, 2, out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# The paddle input does not support integer type
def _test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        x = torch.tensor([[4, 5, 6], [1, 2, 3], [4, 9, 10]])
        result = torch.matrix_power(x, 2)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        x = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        out = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        result = torch.matrix_power(input=x, n=2, out=out)
        """
    )
    obj.run(pytorch_code, ["result", "out"])


# generated by validate_unittest autofix, based on test_case_5
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        x = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        out = torch.tensor([[4., 5., 6.], [1., 2., 3.], [4., 9., 10.]])
        result = torch.matrix_power(out=out, n=2, input=x)
        """
    )
    obj.run(pytorch_code, ["result", "out"])
