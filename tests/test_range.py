# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import textwrap

from apibase import APIBase

obj = APIBase("torch.range")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.range(1,4)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.range(1,4,0.5)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        y = torch.Tensor([3, 4])
        result = torch.range(1,4,0.5, out=y)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.range(1,4,0.5, dtype=torch.float64)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.range(1,4,0.5, device="cpu")
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        result = torch.range(1,4.2,0.5, device="cpu")
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        out = torch.randn(2)
        result = torch.range(1, 4.2, 0.5, out=out, dtype=torch.float, layout=torch.strided, device="cpu", requires_grad=True)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_7
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        out = torch.randn(2)
        result = torch.range(start=1, end=4.2, step=0.5, out=out, dtype=torch.float, layout=torch.strided, device="cpu", requires_grad=True)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_7
def test_case_9():
    pytorch_code = textwrap.dedent(
        """
        import torch
        out = torch.randn(2)
        result = torch.range(requires_grad=True, device="cpu", layout=torch.strided, dtype=torch.float, out=out, step=0.5, end=4.2, start=1)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)
