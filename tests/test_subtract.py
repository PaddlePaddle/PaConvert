# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.subtract")


# paddle not support type promote and x/y must have same dtype
def _test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1, 1, 1, 0])
        result = torch.subtract(a, b)
        """
    )
    obj.run(pytorch_code, ["result"])


# paddle not support type promote and x/y must have same dtype
def _test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1, 1, 1, 0])
        result = torch.subtract(input=a, other=b)
        """
    )
    obj.run(pytorch_code, ["result"])


# paddle not support type promote and x/y must have same dtype
def _test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1, 1, 1, 0])
        result = torch.subtract(a, b, alpha=3)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1., 1., 1., 0.])
        result = torch.subtract(a, b)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1., 1., 1., 0.])
        result = torch.subtract(input=a, other=b)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1., 1., 1., 0.])
        out = torch.tensor([1., 1, 1, 0])
        result = torch.subtract(a, b, alpha=3, out=out)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        result = torch.subtract(a, 0.5, alpha=3)
        """
    )
    obj.run(pytorch_code, ["result"])


def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        out = torch.tensor([1., 1, 1, 0])
        result = torch.subtract(a, 0.5, alpha=3, out=out)
        """
    )
    obj.run(pytorch_code, ["out"])


# generated by validate_unittest autofix, based on test_case_6
def test_case_9():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1., 1., 1., 0.])
        out = torch.tensor([1., 1, 1, 0])
        result = torch.subtract(input=a, other=b, alpha=3, out=out)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_6
def test_case_10():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        b = torch.tensor([1., 1., 1., 0.])
        out = torch.tensor([1., 1, 1, 0])
        result = torch.subtract(out=out, alpha=3, other=b, input=a)
        """
    )
    obj.run(pytorch_code, ["result"])


# generated by validate_unittest autofix, based on test_case_8
def test_case_11():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        out = torch.tensor([1., 1, 1, 0])
        result = torch.subtract(input=a, other=0.5, alpha=3, out=out)
        """
    )
    obj.run(pytorch_code, ["out"])


# generated by validate_unittest autofix, based on test_case_8
def test_case_12():
    pytorch_code = textwrap.dedent(
        """
        import torch
        a = torch.tensor([ 0.5950,-0.0872, 2.3298, -0.2972])
        out = torch.tensor([1., 1, 1, 0])
        result = torch.subtract(out=out, alpha=3, other=0.5, input=a)
        """
    )
    obj.run(pytorch_code, ["out"])
