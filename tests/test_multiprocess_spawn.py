# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.multiprocessing.spawn")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        def train():
            return torch.tensor([1])
        torch.multiprocessing.spawn(train)
        """
    )
    obj.run(pytorch_code)


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        def train():
            return torch.tensor([1])
        torch.multiprocessing.spawn(fn=train, args=(True,), nprocs=2, join=True, daemon=False, start_method='spawn')
        """
    )
    obj.run(pytorch_code)


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        def train():
            return torch.tensor([1])
        torch.multiprocessing.spawn(train, args=(True,), nprocs=2, join=True, daemon=False, start_method='spawn')
        """
    )
    obj.run(pytorch_code)


# generated by validate_unittest autofix, based on test_case_2
def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        def train():
            return torch.tensor([1])
        torch.multiprocessing.spawn(train, (True,), 2, True, False, 'spawn')
        """
    )
    obj.run(pytorch_code)


# generated by validate_unittest autofix, based on test_case_2
def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        def train():
            return torch.tensor([1])
        torch.multiprocessing.spawn(start_method='spawn', daemon=False, join=True, nprocs=2, args=(True,), fn=train)
        """
    )
    obj.run(pytorch_code)
