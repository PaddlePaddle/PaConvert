# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import textwrap

from apibase import APIBase

obj = APIBase("torch.nn.functional.affine_grid")


def test_case_1():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(x, [1, 2, 3, 3])
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_2():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(x, size=[1, 2, 3, 3])
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_3():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3, 0.9], [-0.7, -0.7, 0.3, 0.2], [ 0.6,  0.5, 1.5, 0.7]]])
        result = F.affine_grid(x, size=[1, 2, 3, 3, 3])
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_4():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(x, size=[1, 2, 3, 3], align_corners=True)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


def test_case_5():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(x, [1, 2, 3, 3], False)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_4
def test_case_6():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(theta=x, size=[1, 2, 3, 3], align_corners=True)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_4
def test_case_7():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(align_corners=True, size=[1, 2, 3, 3], theta=x)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_5
def test_case_8():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(theta=x, size=[1, 2, 3, 3], align_corners=False)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)


# generated by validate_unittest autofix, based on test_case_5
def test_case_9():
    pytorch_code = textwrap.dedent(
        """
        import torch
        import torch.nn.functional as F
        x = torch.tensor([[[-0.7, -0.4, 0.3], [ 0.6,  0.5, 1.5]]])
        result = F.affine_grid(align_corners=False, size=[1, 2, 3, 3], theta=x)
        """
    )
    obj.run(pytorch_code, ["result"], check_value=False)
